name: cmake-linux

on: [pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BLAZE_INSTALL_DIR: ${{github.workspace}}/deps/blaze
  BLAZE_INCLUDE: ${{github.workspace}}/deps/blaze/include


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
     matrix:
       compiler: [g++, clang++]
    steps:

      - name: initialize repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: wget
        uses: wei/wget@v1
        with:
          args: https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.7.tar.gz

      - name: untar blaze
        run: |
          tar -xf blaze-3.7.tar.gz;
          mkdir -p deps/blaze
#
      - name: Configure CMake blaze
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/blaze-3.7
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake . -DCMAKE_INSTALL_PREFIX=${BLAZE_INSTALL_DIR} #${{github.workspace}}/deps/blaze;

      - name: Install blaze
        working-directory: ${{github.workspace}}/blaze-3.7
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -- install

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        env:
          CXX: ${{matrix.compiler}}
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TEST:BOOL=true -DBUILD_EXAMPLES:BOOL=true -DBLAZE_INCLUDE_OVERRIDE:STRING=${BLAZE_INCLUDE} -DENABLE_OMP:BOOL=false

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        env:
          CC: ${{matrix.compiler}}
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE
