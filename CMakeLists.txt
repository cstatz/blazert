CMAKE_MINIMUM_REQUIRED(VERSION 3.7.0)
PROJECT(blazert)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Ofast -funroll-loops -march=native -Wall")

INCLUDE(CheckCXXCompilerFlag)
INCLUDE(GNUInstallDirs)

FIND_PACKAGE(blaze REQUIRED 3.7)
INCLUDE_DIRECTORIES(${BLAZE_INCLUDE_DIRS})

ADD_SUBDIRECTORY(examples)

SET(BLAZERT_VERSION_NUMBER 0.0.1)
SET(BLAZERT_VERSION_STRING ${EIGEN_VERSION_NUMBER} )
SET(BLAZERT_DEFINITIONS "")
SET(BLAZERT_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/${INCLUDE_INSTALL_DIR}" )
SET(BLAZERT_ROOT_DIR ${CMAKE_INSTALL_PREFIX} )

INCLUDE(CMakePackageConfigHelpers)

CONFIGURE_PACKAGE_CONFIG_FILE(
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/blazert.cmake.in
        ${CMAKE_CURRENT_BINARY_DIR}/blazertConfig.cmake
        PATH_VARS BLAZERT_INCLUDE_DIR BLAZERT_ROOT_DIR
        INSTALL_DESTINATION ${CMAKE_INSTALL_DATADIR}/blazert/cmake
        NO_CHECK_REQUIRED_COMPONENTS_MACRO)

WRITE_BASIC_PACKAGE_VERSION_FILE(blazertConfigVersion.cmake VERSION ${BLAZERT_VERSION_NUMBER} COMPATIBILITY SameMajorVersion)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/blazertConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/blazertConfigVersion.cmake DESTINATION ${CMAKE_INSTALL_DATADIR}/blazert/cmake)
INSTALL(DIRECTORY blazert DESTINATION include)
